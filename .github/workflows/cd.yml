# GitHub Actions workflow for Continuous Deployment (CD)
# Requirements Addressed:
# - Continuous Deployment (Technical Specification/6.9 Deployment Strategy)
#   - Implements CI/CD pipelines using tools like Jenkins, GitHub Actions, or AWS CodePipeline to automate testing, building, and deploying applications.

# Trigger the workflow on pushes to the 'main' branch
on:
  push:
    branches:
      - main

jobs:
  deploy:
    # Run the job on the latest version of Ubuntu
    runs-on: ubuntu-latest

    # Steps to execute during the deployment job
    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        # External Dependency: actions/checkout@v2 - Checks out the repository code for deployment.
        # Version: v2
        uses: actions/checkout@v2

      # Step 2: Set up Terraform for infrastructure provisioning
      - name: Setup Terraform
        # External Dependency: hashicorp/setup-terraform@v1 - Sets up Terraform for infrastructure provisioning.
        # Version: v1
        uses: hashicorp/setup-terraform@v1

      # Step 3: Initialize Terraform configurations
      - name: Terraform Init
        # Initialize and apply Terraform configurations to provision AWS resources.
        # Requirements Addressed:
        # - Initialize and apply Terraform configurations to provision AWS resources. (Technical Specification/6.9 Deployment Strategy)
        working-directory: infrastructure
        run: terraform init

      # Step 4: Apply Terraform configurations
      - name: Terraform Apply
        # Apply the Terraform configurations to provision AWS resources.
        # Ensure AWS credentials are securely accessed via GitHub secrets.
        working-directory: infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: terraform apply -auto-approve

      # Step 5: Log in to Docker Hub or another container registry
      - name: Log in to Docker registry
        # External Dependency: docker/login-action@v2 - Logs into a Docker registry.
        # Version: v2
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.io

      # Step 6: Build and push Docker images for each service
      # Internal Dependency: Dockerfiles for each backend service define the Docker images.
      # Requirements Addressed:
      # - Build and push Docker images for each service using their respective Dockerfiles. (Technical Specification/6.9 Deployment Strategy)

      # Build and push authentication_service image
      - name: Build and push authentication_service image
        uses: docker/build-push-action@v2 # External Dependency: docker/build-push-action@v2
        with:
          context: ./src/backend/authentication_service
          file: ./src/backend/authentication_service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/authentication_service:latest

      # Build and push policy_engine image
      - name: Build and push policy_engine image
        uses: docker/build-push-action@v2 # External Dependency: docker/build-push-action@v2
        with:
          context: ./src/backend/policy_engine
          file: ./src/backend/policy_engine/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/policy_engine:latest

      # Build and push notification_service image
      - name: Build and push notification_service image
        uses: docker/build-push-action@v2 # External Dependency: docker/build-push-action@v2
        with:
          context: ./src/backend/notification_service
          file: ./src/backend/notification_service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/notification_service:latest

      # Build and push reporting_module image
      - name: Build and push reporting_module image
        uses: docker/build-push-action@v2 # External Dependency: docker/build-push-action@v2
        with:
          context: ./src/backend/reporting_module
          file: ./src/backend/reporting_module/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/reporting_module:latest

      # Build and push main_server image
      - name: Build and push main_server image
        uses: docker/build-push-action@v2 # External Dependency: docker/build-push-action@v2
        with:
          context: ./src/backend/main_server
          file: ./src/backend/main_server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/main_server:latest

      # Step 7: Set up Kubernetes CLI (kubectl) for deploying to the Kubernetes cluster
      - name: Set up kubectl
        # External Dependency: azure/setup-kubectl@v3 - Sets up kubectl for Kubernetes operations.
        # Version: v3
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Step 8: Deploy the Docker containers to the Kubernetes cluster
      - name: Deploy to Kubernetes
        # Deploys the Docker containers to the Kubernetes cluster.
        # Requirements Addressed:
        # - Deploy the Docker containers to the Kubernetes cluster. (Technical Specification/6.9 Deployment Strategy)
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo "${KUBE_CONFIG_DATA}" | base64 --decode > ${HOME}/.kube/config
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml